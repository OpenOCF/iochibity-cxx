#******************************************************************
#
# Copyright 2014 Intel Mobile Communications GmbH All Rights Reserved.
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

##
# Examples build script
##

Import('env')

# thread_env = SConscript('#build_common/thread.scons')
# lib_env = thread_env.Clone()

# Add third party libraries
# SConscript('#resource/third_party_libs.scons', 'lib_env')
local_env = env.Clone()
target_os = local_env.get('TARGET_OS')
install_sysroot = local_env.get('INSTALL_SYSROOT')
source_root     = local_env.get('SOURCE_ROOT')

######################################################################
# Build flags
######################################################################
local_env.AppendUnique(CPPPATH = ['#src',
	                          install_sysroot + '/include',
                                  source_root + '/resource/c_common',
                                  source_root + '/resource/csdk/stack',
                                  source_root + '/resource/csdk/logger',
                                  source_root + '/resource/csdk/connectivity/api',
	                          '#src/oc_logger'])

# local_env.AppendUnique(CPPPATH = [
# 		'../include/',
# 		'../csdk/stack/include',
# 		'../c_common/ocrandom/include',
# 		'../csdk/logger/include',
# 		'../oc_logger/include'
# 		])

local_env.AppendUnique(LIBPATH = [install_sysroot + '/lib'])
local_env.AppendUnique(RPATH = [local_env.get('BUILD_DIR')])

local_env.PrependUnique(LIBS = ['coap'])
local_env.AppendUnique(LIBS = ['connectivity_abstraction'])
local_env.AppendUnique(LIBS = ['oc_logger'])
local_env.AppendUnique(LIBS = ['chibity'])
local_env.AppendUnique(LIBS = ['oc'])

# compiler = local_env.get('CXX')
# if 'g++' in compiler:
# 	local_env.AppendUnique(CXXFLAGS = ['-std=c++0x', '-Wall'])

if target_os in ['msys_nt', 'windows']:
	local_env.PrependUnique(LIBS = ['mswsock', 'ws2_32', 'iphlpapi', 'ole32'])

if local_env.get('SECURED'):
	local_env.AppendUnique(LIBS = ['tinydtls'])
	local_env.AppendUnique(CPPDEFINES = ['_WITH_DTLS_'])
	if target_os in ['msys_nt', 'windows']:
		local_env.AppendUnique(LIBS = ['advapi32'])

if target_os == 'android':
	local_env.AppendUnique(CXXFLAGS = ['-frtti', '-fexceptions'])
	local_env.AppendUnique(LIBS = ['gnustl_shared'])

	if not local_env.get('RELEASE'):
		local_env.AppendUnique(LIBS = ['log'])

if target_os in ['darwin', 'ios']:
	local_env.AppendUnique(CPPDEFINES = ['_DARWIN_C_SOURCE'])

if local_env.get('WITH_CLOUD'):
	local_env.AppendUnique(CPPDEFINES = ['WITH_CLOUD'])

if target_os in ['msys_nt', 'windows']:
	local_env.AppendUnique(LIBS = ['Comctl32', 'Gdi32', 'User32'])

if local_env.get('LOGGING'):
	local_env.AppendUnique(CPPDEFINES = ['TB_LOG'])

if 'CLIENT' in local_env.get('RD_MODE'):
	local_env.AppendUnique(CPPDEFINES = ['RD_CLIENT'])

# def make_single_file_cpp_program(program_name):
# 	return local_env.Program(program_name, program_name + ".cpp")

######################################################################
# Source files and Targets
######################################################################
# example_names = [
# 	'simpleserver', 'simpleclient',
# 	'simpleclientserver',
# 	'directpairingclient',
# 	'devicediscoveryserver', 'devicediscoveryclient'
# 	]

# if target_os not in ['windows', 'msys_nt']:
# 	example_names += [
# 		'simpleserverHQ', 'simpleclientHQ',
# 		'fridgeserver', 'fridgeclient',
# 		'presenceserver', 'presenceclient',
# 		'roomserver', 'roomclient',
# 		'garageserver',
# 		'garageclient',
# 		'groupserver',
# 		'groupclient',
# 		'lightserver',
# 		'threadingsample'
# 		]

# if 'CLIENT' in local_env.get('RD_MODE'):
# 	example_names += [
# 		'rdclient'
# 		]

# examples = map(make_single_file_cpp_program, example_names)

# program_name = ['devicediscoveryserver', 'devicediscoveryclient']

dc = local_env.Program('devicediscoveryclient', 'devicediscoveryclient.cpp')

Alias("discovery", local_env.Install(install_sysroot + '/bin/', dc))

ds = local_env.Program('devicediscoveryserver', 'devicediscoveryserver.cpp')

Alias("discovery", local_env.Install(install_sysroot + '/bin/', ds))

######################################################################
# Other examples
######################################################################
# clientjson = local_env.Install(local_env.get('BUILD_DIR') + '/resource/examples/',
# 				local_env.get('SRC_DIR') + '/resource/examples/' + 'oic_svr_db_client.dat')
# serverjson = local_env.Install(local_env.get('BUILD_DIR') + '/resource/examples/',
# 				local_env.get('SRC_DIR') + '/resource/examples/' + 'oic_svr_db_server.dat')
# directpairingdat = local_env.Install(local_env.get('BUILD_DIR') + '/resource/examples/',
# 				local_env.get('SRC_DIR') + '/resource/examples/' + 'oic_svr_db_client_directpairing.dat')

# examples += [clientjson, serverjson, directpairingdat]

# if target_os in ['msys_nt', 'windows']:
# 	winUIClient = local_env.Program('winUIClient', ['winuiclientgui.cpp', 'winuiclient.cpp'])
# 	mediaserver = local_env.Program('mediaserver', 'mediaserver.cpp')
# 	examples += [winUIClient, mediaserver]


# local_env.AppendTarget('examples')
