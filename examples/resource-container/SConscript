# extracted from service/resource-container/SConscript:

######################################################################
# build discomfort index sensor sample bundle
######################################################################
if target_os in ['darwin', 'linux', 'tizen', 'android']:
    DI_sensor_bundle_env = resource_container_env.Clone()

    DI_SENSOR_BUNDLE_DIR = 'examples/DiscomfortIndexSensorBundle/'
    DI_sensor_bundle_env.AppendUnique(CPPPATH = [ DI_SENSOR_BUNDLE_DIR + 'include' ])

    DI_sensor_bundle_env.PrependUnique(LIBS = ['rcs_container'])

    DI_sensor_bundle_src = [ Glob(DI_SENSOR_BUNDLE_DIR + 'src/*.cpp')]

    DISensorBundle = DI_sensor_bundle_env.SharedLibrary('DISensorBundle', DI_sensor_bundle_src)
    DI_sensor_bundle_env.InstallTarget(DISensorBundle, 'libDISensorBundle')
    DI_sensor_bundle_env.UserInstallTargetLib(DISensorBundle, 'libDISensorBundle')

    if target_os in ['darwin', 'linux']:
        SConscript(DI_SENSOR_BUNDLE_DIR + 'src/inputSensors/SConscript')
        Command("THSensorApp", DI_SENSOR_BUNDLE_DIR + "src/inputSensors/THSensorApp/THSensorApp", Copy("$TARGET", "$SOURCE"))
        Command("THSensorApp1", DI_SENSOR_BUNDLE_DIR + "src/inputSensors/THSensorApp1/THSensorApp1", Copy("$TARGET", "$SOURCE"))

######################################################################
# build BMI sensor sample bundle
######################################################################
if target_os in ['darwin', 'linux', 'tizen', 'android']:
    BMI_sensor_bundle_env = resource_container_env.Clone()

    BMI_SENSOR_BUNDLE_DIR = 'examples/BMISensorBundle/'
    BMI_sensor_bundle_env.AppendUnique(CPPPATH = [ BMI_SENSOR_BUNDLE_DIR + 'include' ])

    BMI_sensor_bundle_env.PrependUnique(LIBS = ['rcs_container'])

    BMI_sensor_bundle_src = [ Glob(BMI_SENSOR_BUNDLE_DIR + 'src/*.cpp')]

    BMISensorBundle = BMI_sensor_bundle_env.SharedLibrary('BMISensorBundle', BMI_sensor_bundle_src)
    BMI_sensor_bundle_env.InstallTarget(BMISensorBundle, 'libBMISensorBundle')
    BMI_sensor_bundle_env.UserInstallTargetLib(BMISensorBundle, 'libBMISensorBundle')

    if target_os in ['darwin','linux']:
        SConscript(BMI_SENSOR_BUNDLE_DIR + 'src/inputSensors/SConscript')
        Command("HeightSensorApp", BMI_SENSOR_BUNDLE_DIR + "src/inputSensors/HeightSensorApp/HeightSensorApp", Copy("$TARGET", "$SOURCE"))
        Command("WeightSensorApp", BMI_SENSOR_BUNDLE_DIR + "src/inputSensors/WeightSensorApp/WeightSensorApp", Copy("$TARGET", "$SOURCE"))

######################################################################
# build hue sample bundle
######################################################################

# conf2 = Configure(lib_env)
# if not conf2.CheckLib('curl'):

libcurl = lib_env.get('HAVE_LIBCURL')
if not libcurl:
    print '''X
*********************************** Error *************************************
* Cannot build hue sample. Please install libcurl.
* Example (Ubuntu):
*   sudo apt-get install libcurl4-openssl-dev
*   sudo ldconfig
* Hint: check with pkg-config --libs libcurl and clear scons cache.
* Skipping hue sample build.
*******************************************************************************
    '''
else:
    hue_resource_bundle_env = resource_container_env.Clone()

    HUE_RESOURCE_BUNDLE_DIR = 'examples/HueSampleBundle/'
    hue_resource_bundle_env.AppendUnique(CPPPATH = [
            HUE_RESOURCE_BUNDLE_DIR + 'include',
            'include/'
            ])

    hue_resource_bundle_env.PrependUnique(LIBS = ['curl', 'rcs_container'])

    hue_resource_bundle_src = [ Glob(HUE_RESOURCE_BUNDLE_DIR + 'src/*.cpp')]

    HueBundle = hue_resource_bundle_env.SharedLibrary('HueBundle', hue_resource_bundle_src)
    hue_resource_bundle_env.InstallTarget(HueBundle, 'libHueBundle')
    hue_resource_bundle_env.UserInstallTargetLib(HueBundle, 'libHueBundle')
# lib_env = conf2.Finish()


######################################################################
# Build Container Sample
######################################################################
containersample_env = resource_container_env.Clone();
if target_os == 'darwin':
    containersample_env.AppendUnique(LINKFLAGS=["-Wl,-export_dynamic"])
else:
    containersample_env.AppendUnique(LINKFLAGS=["-rdynamic"])

# Copy test configuration
Command("examples/ResourceContainerConfig.xml","examples/ResourceContainerConfig.xml", Copy("$TARGET", "$SOURCE"))
Ignore("examples/ResourceContainerConfig.xml", "examples/ResourceContainerConfig.xml")

containersample_env.AppendUnique(LIBS = ['rcs_container'])

containersampleapp_src =  ['examples/ContainerSample.cpp']
containersampleapp = containersample_env.Program('ContainerSample',containersampleapp_src)
Alias("containersample", containersampleapp)
env.AppendTarget('containersample')

######################################################################
# Build Container Sample Client
######################################################################
containersampleclient_env = resource_container_env.Clone();

containersample_env.AppendUnique(LIBS = ['rcs_container'])
containersampleclient_src =  ['examples/ContainerSampleClient.cpp']
containersampleclientapp = containersample_env.Program('ContainerSampleClient',containersampleclient_src)
Alias("containersampleclient", containersampleclientapp)
env.AppendTarget('containersampleclient')

